//https://leetcode.com/problems/climbing-stairs/

class Solution {
    //Recursive Approach
//     public int climbStairs(int n) {
//         if(n==1 || n==2)return n;
        
//         return climbStairs(n-1)+climbStairs(n-2);
        
        
//     }
    //Dp
//     public int climbStairs(int n) {
//         int dp[]=new int[n+1];
//         Arrays.fill(dp,-1);
//         dp[1]=1;
//         dp[2]=2;
//         for(int i=3;i<=n;i++){
//             dp[i]=dp[i-1]+dp[i-2];
//         }
        
//         return dp[n];
        
//     }
    //space optimized DP
     public int climbStairs(int n) {
         if(n==1 || n==2)return n;
        int prev1=1;
        int prev2=2;
         int cur=-1;
        for(int i=3;i<=n;i++){
            cur=prev2+prev1;
            prev1=prev2;
            prev2=cur;
        }
        
        return prev2;
        
    }
}
