//Recursive
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
        return helper(nums,nums.size()-1);
	}
    public static int helper(ArrayList<Integer> nums,int ind){
        if(ind==0)return nums.get(0);
        if(ind<0)return 0;
        
        int pick=nums.get(ind)+helper(nums,ind-2);
        int nonPick=0+helper(nums,ind-1);
        return Math.max(pick,nonPick);
    }
}

//Memoize
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
        int dp[]=new int[nums.size()];
        Arrays.fill(dp,-1);
        return helper(nums,nums.size()-1,dp);
	}
    public static int helper(ArrayList<Integer> nums,int ind,int dp[]){
        if(ind==0)return nums.get(0);
        if(ind<0)return 0;
        for(int i=ind;i>=0;i--){
            if(dp[i]!=-1)continue;
        int pick=nums.get(i)+helper(nums,i-2,dp);
        int nonPick=0+helper(nums,i-1,dp);
        dp[i]=Math.max(pick,nonPick);
        }
        return dp[ind];
    }
}

//DP

import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
        int dp[]=new int[nums.size()];
        Arrays.fill(dp,-1);
        return helper(nums,nums.size()-1,dp);
	}
    public static int helper(ArrayList<Integer> nums,int ind,int dp[]){
        if(nums.size()==1)return nums.get(0);
        if(ind<0)return 0;
        dp[0]=nums.get(0);
        
        dp[1]=Math.max(nums.get(0),nums.get(1));
        
        for(int i=2;i<nums.size();i++){
            
        int pick=nums.get(i)+dp[i-2];
        int nonPick=0+dp[i-1];
        dp[i]=Math.max(pick,nonPick);
        }
        return dp[nums.size()-1];
    }
}

//Space Optimised DP
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
        int dp[]=new int[nums.size()];
        Arrays.fill(dp,-1);
        return helper(nums,nums.size()-1,dp);
	}
    public static int helper(ArrayList<Integer> nums,int ind,int dp[]){
        if(nums.size()==1)return nums.get(0);
        if(ind<0)return 0;
       int prev1=nums.get(0);
        
        int prev2=Math.max(nums.get(0),nums.get(1));
        
        for(int i=2;i<nums.size();i++){
            
        int pick=nums.get(i)+prev1;
        int nonPick=0+prev2;
        int curr=Math.max(pick,nonPick);
            prev1=prev2;
            prev2=curr;
        }
        return prev2;
    }
}
