//https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1
public class Solution {
    //Recursion
//     public static int frogJump(int n, int heights[]) {

//         // Write your code here..
        
//     if(n==1)return 0;
        
//         int right=Integer.MAX_VALUE;
//         int left=frogJump(n-1,heights)+Math.abs(heights[n-1]-heights[n-2]);
//         if(n>2)
//         right=frogJump(n-2,heights)+Math.abs(heights[n-1]-heights[n-3]);
//         return Math.min(left,right);

//     }
    //Dp
//      public static int frogJump(int n, int heights[]) {
//         int dp[]=new int[n+1];
//         dp[0]=0;
//         dp[1]=Math.abs(heights[1]-heights[0]);
//         for(int i=2;i<n;i++){
//             int left=dp[i-1]+Math.abs(heights[i]-heights[i-1]);
//             int right=dp[i-2]+Math.abs(heights[i]-heights[i-2]);
//             dp[i]=Math.min(left,right);
//         }
//         return dp[n-1];
//      }
    //Space optimized DP
    public static int frogJump(int n, int heights[]) {
        int prev1=0;
        int prev2=Math.abs(heights[1]-heights[0]);
        for(int i=2;i<n;i++){
            int left=prev2+Math.abs(heights[i]-heights[i-1]);
            int right=prev1+Math.abs(heights[i]-heights[i-2]);
            int curr=Math.min(left,right);
            prev1=prev2;
            prev2=curr;
 }
        return prev2;
     }

}
